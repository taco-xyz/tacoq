name: Tests

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  test:
    name: Docker build and test
    runs-on: ubuntu-latest
    env:
      DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image for testing
        uses: docker/build-push-action@v5
        with:
          context: .
          file: server/services/manager/Dockerfile
          target: builder
          load: true
          tags: app-builder:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Set up database and run migrations
        run: |
          docker run --network host \
            -e DATABASE_URL=${DATABASE_URL} \
            app-builder /bin/bash -c "
              cargo install sqlx-cli --no-default-features --features postgres &&
              cargo sqlx database create &&
              cargo sqlx migrate run --source ./server/libs/db-common/migrations
            "

      - name: Run tests in container
        run: |
          docker run --network host \
            -e DATABASE_URL=${DATABASE_URL} \
            app-builder cargo test --all-features

  e2e-test:
    name: End-to-end tests
    runs-on: ubuntu-latest
    needs: test

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Install Python dependencies
        run: |
          cd client_sdks/python
          uv venv
          source .venv/bin/activate
          uv pip install --dependencies development -e .

      - name: Start test environment
        run: |
          cd client_sdks
          docker-compose -f docker-compose.test.yml up -d
          timeout 30 bash -c 'while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' localhost:3000/health)" != "200" ]]; do sleep 1; done' || false

      - name: Run end-to-end tests
        run: |
          cd client_sdks/python
          pytest tests/

      - name: Cleanup test environment
        if: always()
        run: |
          cd client_sdks
          docker-compose -f docker-compose.test.yml down
