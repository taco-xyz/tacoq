name: Rust CI

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  prepare:
    name: Prepare and lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Format code
        run: cargo fmt --all

      - name: Check compilation
        run: cargo check --all-features

      - name: Run clippy
        run: cargo clippy --all-features -- -D warnings

      - name: Install sqlx-cli
        run: cargo install sqlx-cli --no-default-features --features native-tls,postgres

      - name: Run sqlx prepare
        run: cargo sqlx prepare --workspace --check
        env:
          SQLX_OFFLINE: true

      - name: Commit changes if any
        run: |
          if [[ -n $(git status --porcelain) ]]; then
            git config --global user.name 'GitHub Actions'
            git config --global user.email 'actions@github.com'
            git add .
            CHANGES=""
            git diff --cached --name-only | while read -r file; do
              if [[ $file == .sqlx/* ]]; then
                CHANGES="sqlx-data"
              elif [[ $file == *.rs ]]; then
                if grep -q "^[+-]" <(git diff --cached -U0 "$file") ; then
                  if [[ -z $CHANGES ]]; then
                    CHANGES="formatting"
                  else
                    CHANGES="$CHANGES and formatting"
                  fi
                fi
              fi
            done
            
            git commit -m "chore: automatic ${CHANGES} update"
            git push
          fi

  test:
    name: Docker build and test
    runs-on: ubuntu-latest
    needs: prepare
    env:
      DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image for testing
        uses: docker/build-push-action@v5
        with:
          context: .
          file: server/services/galactus/Dockerfile
          target: builder
          load: true
          tags: app-builder:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Create test database and run migrations
        run: |
          docker run --network host \
            -e DATABASE_URL=${DATABASE_URL} \
            app-builder sqlx database create
          docker run --network host \
            -e DATABASE_URL=${DATABASE_URL} \
            app-builder sqlx migrate run --source ./server/libs/db-common/migrations
      - name: Run tests in container
        run: |
          docker run --network host \
            -e DATABASE_URL=${DATABASE_URL} \
            app-builder cargo test --all-features

  publish:
    name: Publish Docker image
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: server/services/galactus/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository }}/galactus:latest
            ghcr.io/${{ github.repository }}/galactus:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
