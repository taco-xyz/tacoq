from typing import Optional
from uuid import UUID
from enum import Enum
from datetime import datetime, timedelta
import uuid
from pydantic import BaseModel, Field

TaskInput = str
""" Task input data defined by the user - they can use whatever format they want, but
they must handle the serialization and deserialization of the data themselves. """

TaskOutput = str
""" Task output data defined by the user - they can use whatever format they want, but
they must handle the serialization and deserialization of the data themselves. """


class TaskStatus(str, Enum):
    """The status of a task"""

    PENDING = "pending"
    """ The task is created but not yet assigned """

    PROCESSING = "processing"
    """ The task is being processed by a worker """

    COMPLETED = "completed"
    """ The task has completed successfully """


class TaskResult(BaseModel):
    """Task results contain the output or error data from a completed task."""

    data: TaskOutput
    """ The data of the task's result. """

    started_at: datetime
    """ The time the task was started. """

    completed_at: datetime
    """ The time the task was completed. """


class Task(BaseModel):
    """Tasks are sent to workers to be executed with a specific payload.
    Workers are eligible for receiving certain tasks depending on their
    kind.
    """

    id: UUID = Field(default_factory=uuid.uuid4)
    """The unique ID of the task. Generated by the client so that it can be communicated to the
    manager and the workers directly."""

    task_kind: str
    """ The kind of the task - dictates the queue that it will be placed in (via the worker kind)
    and dictates how the worker will interpret the task. """

    worker_kind: str
    """ The kind of worker that will execute the task. """

    started_at: Optional[datetime] = Field(default=None)
    """ The time the task was started. """

    completed_at: Optional[datetime] = Field(default=None)
    """ The time the task was completed. """

    input_data: TaskInput = Field(default="")
    """ The input data of the task. """

    output_data: Optional[TaskOutput] = Field(default=None)
    """ The result of the task. """

    status: TaskStatus = Field(default=TaskStatus.PENDING)
    """ The current status of the task at the time of retrieval."""

    created_at: datetime = Field(default_factory=datetime.now)
    """ The time the task was created. """

    priority: int = Field(default=0)
    """ The priority of the task. """

    is_error: int = Field(default=0)
    """ Whether the task failed. """

    otel_ctx_carrier: Optional[dict[str, str]] = Field(default=None)
    """ The OpenTelemetry context carrier for the task. """

    @property
    def has_finished(self) -> bool:
        """Whether the task has finished."""

        return self.status == TaskStatus.COMPLETED

    @property
    def completion_time(self) -> Optional[timedelta]:
        """The time it took for the task to complete. If the task has not completed,
        this will return `None`.
        """

        if self.completed_at is None or self.started_at is None:
            return None
        return self.completed_at - self.started_at
