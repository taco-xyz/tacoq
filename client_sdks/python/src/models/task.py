from typing import Any, Optional
from uuid import UUID
from enum import Enum
from datetime import datetime

from pydantic import BaseModel

TaskInput = Any  # Maps to Option<serde_json::Value>
TaskOutput = Any  # Maps to Option<serde_json::Value>


class TaskStatus(str, Enum):
    """The status of a task"""

    PENDING = "pending"
    """ The task is created but not yet assigned """

    RUNNING = "running"
    """ The task is being processed by a worker """

    COMPLETED = "completed"
    """ The task has completed successfully """


class TaskKind(BaseModel):
    """A type of task. Requires both the type of worker that executes it and the name of the task."""

    worker_kind: str
    name: str

    def __str__(self) -> str:
        return f"{self.worker_kind}:{self.name}"


class TaskResult(BaseModel):
    """Task results contain the output or error data from a completed task."""

    data: TaskOutput
    """ The data of the task's result. """

    is_error: bool
    """ Whether the task failed. """

    started_at: datetime
    """ The time the task was started. """

    completed_at: datetime
    """ The time the task was completed. """


class TaskInstance(BaseModel):
    """Tasks are sent to workers to be executed with a specific payload.
    Workers are eligible for receiving certain tasks depending on their
    list of capabilities.
    """

    id: UUID
    """The unique ID of the task. Generated by the client so that it can be communicated to the
    manager and the workers directly."""

    task_kind: TaskKind
    """ The kind of the task - dictates the queue that it will be placed in (via the worker kind)
    and dictates how the worker will interpret the task. """

    input_data: TaskInput
    """ The input data of the task. """

    status: TaskStatus
    """ The current status of the task at the time of retrieval."""

    created_at: datetime
    """ The time the task was created. """

    result: Optional[TaskResult]
    """ The result of the task. """

    priority: int
    """ The priority of the task. """

    @property
    def has_finished(self) -> bool:
        return self.status == TaskStatus.COMPLETED
